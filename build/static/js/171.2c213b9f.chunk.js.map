{"version":3,"file":"static/js/171.2c213b9f.chunk.js","mappings":"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","sources":["sections/auth/NewPasswordForm.js","pages/auth/NewPassword.js","../node_modules/phosphor-react/src/icons/CaretLeft.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\n// import { Link as RouterLink } from \"react-router-dom\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n    Stack,\r\n    Alert,\r\n    IconButton,\r\n    InputAdornment\r\n} from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport FormProvider from \"../../components/hook-form/FormProvider\";\r\nimport { Eye, EyeSlash } from \"phosphor-react\";\r\n// components\r\nimport { RHFTextField } from \"../../components/hook-form\";\r\n\r\n\r\nconst NewPasswordForm = () => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n\r\n\r\n    const NewPasswordSchema = Yup.object().shape({\r\n\r\n        newPassword: Yup.string()\r\n            .min(6, 'Password must be at least 6 characters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .required('Confirm password is required')\r\n            .oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n    });\r\n\r\n    const defaultValues = {\r\n        newPassword: '',\r\n        confirmPassword: '',\r\n    };\r\n\r\n    const methods = useForm({\r\n        resolver: yupResolver(NewPasswordSchema),\r\n        defaultValues,\r\n    });\r\n\r\n    const {\r\n        reset,\r\n        setError,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            //   console.log(data);\r\n            // submit data to backend\r\n            //   dispatch(LoginUser(data));\r\n        } catch (error) {\r\n            console.error(error);\r\n            reset();\r\n            setError(\"afterSubmit\", {\r\n                ...error,\r\n                message: error.message,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <FormProvider\r\n            methods={methods}\r\n            onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <Stack spacing={3}>\r\n                {!!errors.afterSubmit && (\r\n                    <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n\r\n                <RHFTextField name=\"email\" label=\"Email address\" />\r\n                <RHFTextField\r\n                    name=\"newPassword\"\r\n                    label=\"New Password\"\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setShowPassword(!showPassword);\r\n                                    }}\r\n                                >\r\n                                    {showPassword ? <Eye /> : <EyeSlash />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n\r\n                <RHFTextField\r\n                    name=\"confirmPassword\"\r\n                    label=\"Confirm New Password\"\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    onClick={() => setShowPassword(!showPassword)}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {showPassword ? <Eye /> : <EyeSlash />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n\r\n            </Stack>\r\n\r\n\r\n            <LoadingButton\r\n                fullWidth\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n\r\n                sx={{\r\n                    mt: 3,\r\n                    bgcolor: \"text.primary\",\r\n                    color: (theme) =>\r\n                        theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n                    \"&:hover\": {\r\n                        bgcolor: \"text.primary\",\r\n                        color: (theme) =>\r\n                            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n                    },\r\n                }}\r\n            >\r\n                Update Password\r\n            </LoadingButton>\r\n\r\n\r\n        </FormProvider>\r\n    );\r\n};\r\n\r\nexport default NewPasswordForm; \r\n","import { Stack, Typography, Link } from \"@mui/material\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { CaretLeft } from \"phosphor-react\";\r\nimport NewPasswordForm from \"../../sections/auth/NewPasswordForm\";\r\n// import NewPasswordForm from \"../../sections/auth/NewPasswordForm\";\r\n\r\nconst NewPassword = () => {\r\n  return (\r\n    <>\r\n      <Stack spacing={2} sx={{ mb: 5, position: \"relative\" }}>\r\n        <Typography variant=\"h3\" paragraph>\r\n          Reset Password\r\n        </Typography>\r\n\r\n        <Typography sx={{ color: \"text.secondary\", mb: 5 }}>\r\n          Please set your new password.\r\n        </Typography>\r\n      </Stack>\r\n\r\n      {/* NewPasswordForm */}\r\n\r\n      <NewPasswordForm />\r\n\r\n      <Link\r\n        component={RouterLink}\r\n        to={\"/auth/login\"}\r\n        color=\"inherit\"\r\n        variant=\"subtitle2\"\r\n        sx={{\r\n          mt: 3,\r\n          mx: \"auto\",\r\n          alignItems: \"center\",\r\n          display: \"inline-flex\",\r\n        }}\r\n      >\r\n        <CaretLeft size={24} />\r\n        Return to sign in\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n\r\n\r\n//","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"160 208 80 128 160 48 160 208\" opacity=\"0.2\" />\n    <polygon\n      points=\"160 208 80 128 160 48 160 208\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M163.1,40.6a8.4,8.4,0,0,0-8.8,1.7l-80,80a8.1,8.1,0,0,0,0,11.4l80,80A8.3,8.3,0,0,0,160,216a8.5,8.5,0,0,0,3.1-.6A8,8,0,0,0,168,208V48A8,8,0,0,0,163.1,40.6Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst CaretLeft = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nCaretLeft.displayName = \"CaretLeft\";\n\nexport default CaretLeft;\n"],"names":["NewPasswordForm","showPassword","setShowPassword","useState","NewPasswordSchema","Yup","shape","newPassword","min","required","confirmPassword","oneOf","methods","useForm","resolver","yupResolver","defaultValues","reset","setError","handleSubmit","formState","errors","_jsxs","FormProvider","onSubmit","async","children","Stack","spacing","afterSubmit","_jsx","Alert","severity","message","RHFTextField","name","label","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Eye","EyeSlash","edge","LoadingButton","fullWidth","size","variant","sx","mt","bgcolor","color","theme","palette","mode","NewPassword","_Fragment","mb","Typography","paragraph","Link","component","RouterLink","to","mx","alignItems","display","CaretLeft","pathsByWeight","Map","set","React","points","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","opacity","d","renderPath","weight","renderPathForWeight","forwardRef","props","ref","IconBase","Object","assign","displayName"],"sourceRoot":""}